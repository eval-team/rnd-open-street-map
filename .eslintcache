[{"/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/index.tsx":"1","/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/reportWebVitals.ts":"2","/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/App.tsx":"3","/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/useGeoLocation.tsx":"4","/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/react-app-env.d.ts":"5","/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/setupTests.ts":"6","/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/SearchControle.tsx":"7","/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/Routing.tsx":"8","/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/components/MapComponent.tsx":"9","/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/components/LocationMarker.tsx":"10","/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/hooks/useIsMount.ts":"11","/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/components/searchAutoComplete.tsx":"12","/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/EndPoint/index.ts":"13"},{"size":500,"mtime":1637125097198,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1637125097198,"results":"16","hashOfConfig":"15"},{"size":2428,"mtime":1640682612469,"results":"17","hashOfConfig":"15"},{"size":1367,"mtime":1640605770461,"results":"18","hashOfConfig":"15"},{"size":40,"mtime":1637125097198,"results":"19","hashOfConfig":"20"},{"size":241,"mtime":1637125097199,"results":"21","hashOfConfig":"20"},{"size":814,"mtime":1637559488579,"results":"22","hashOfConfig":"15"},{"size":763,"mtime":1639551899056,"results":"23","hashOfConfig":"15"},{"size":1041,"mtime":1640673785004,"results":"24","hashOfConfig":"15"},{"size":1421,"mtime":1640676137528,"results":"25","hashOfConfig":"15"},{"size":206,"mtime":1640673647662,"results":"26","hashOfConfig":"15"},{"size":3159,"mtime":1640682542627,"results":"27","hashOfConfig":"15"},{"size":341,"mtime":1640682663456,"results":"28","hashOfConfig":"15"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"oe0ej5",{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wc69qz",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"31"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/index.tsx",[],["61","62"],"/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/reportWebVitals.ts",[],"/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/App.tsx",["63"],"import { Icon, IconButton, LocateIcon, SearchInput } from \"evergreen-ui\";\nimport React, { useEffect, useState } from \"react\";\n\nimport useGeoLocation from \"./useGeoLocation\";\nimport MapComponent from \"./components/MapComponent\";\nimport \"./App.css\";\nimport SearchLocationInput from \"./components/searchAutoComplete\";\nimport { getCurrentLocationPlaceName } from \"./EndPoint\";\n\n\nexport interface LatLng{\n  lat:number,\n  lng:number\n}\n\n\n\nconst gMapKey = process.env.REACT_APP_AUTO_KEY;\n\n\nfunction App() {\n  const [positions, setPositions] = useState({\n    latitude: 28.62,\n    longitude: 77.34,\n    isCurrentLocation: false,\n    isSearchPlace:false,\n    address:''\n  });\n\n  const location = useGeoLocation();\n\n  const latitude = location.coordinates ? location.coordinates.lat : 0;\n  const longitude = location.coordinates ? location.coordinates.lng : 0;\n  const errorMessage = location.error ? location.error.message : \"\";\n\n  const handelGoToCurrentLocation = () => {\n    if (!errorMessage) {\n      setPositions({\n        ...positions,\n        latitude: latitude,\n        longitude: longitude,\n        isCurrentLocation: true,\n      });\n    }\n  };\n\n  const getLatLngOnDrag=(value:LatLng)=>{\n    if(value.lat && value.lng){\n      setPositions({\n        ...positions,\n        isCurrentLocation: false,\n        latitude: value.lat,\n        longitude: value.lng,\n      });\n    }\n  }\n\n  const getSearchPlaceLatLng=(values:any)=>{\n    if(values.latitude){\n      setPositions({\n        ...positions,\n        isCurrentLocation: false,\n        latitude: values.latitude,\n        longitude: values.longitude,\n        isSearchPlace:true\n      });\n    }\n  }\n\n  const getLocationName=()=>{\n    getCurrentLocationPlaceName(positions.latitude,positions.longitude).then((response)=>{\n      if(response.status==='OK'){\n        console.log(response.results[0].formatted_address,);\n        \n      }\n    })\n  }\n\n  useEffect(()=>{\n    getLocationName();\n  })\n\n  return (\n    <>\n      <MapComponent positions={positions} getLatLngOnDrag={getLatLngOnDrag} />\n\n      <IconButton\n        position=\"fixed\"\n        bottom={20}\n        right={20}\n        zIndex={999}\n        onClick={handelGoToCurrentLocation}\n      >\n        <Icon icon={LocateIcon} size={18} />\n      </IconButton>\n\n      <SearchLocationInput gMapKey={gMapKey} currentLocationName={positions.address} getSearchPlaceLatLng={getSearchPlaceLatLng}  />\n     \n    </>\n  );\n}\n\nexport default App;\n","/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/useGeoLocation.tsx",[],"/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/react-app-env.d.ts",[],"/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/setupTests.ts",[],"/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/SearchControle.tsx",["64"],"import { useEffect } from \"react\";\nimport { useMap } from \"react-leaflet\";\nimport { GeoSearchControl } from \"leaflet-geosearch\";\nimport \"leaflet-geosearch/dist/geosearch.css\";\n\n\ninterface Props {\n  provider: any;\n  showMarker: boolean;\n  showPopup: boolean;\n  popupFormat: Function;\n  maxMarkers: number;\n  retainZoomLevel: boolean;\n  animateZoom: boolean;\n  autoClose: boolean;\n  searchLabel: string;\n  keepResult: boolean;\n}\n\nconst SearchControl = ({provider,...props}: Props) => {\n  const map = useMap();\n  // @ts-ignore\n\n  useEffect(() => {\n    // @ts-ignore\n\n    const searchControl = new GeoSearchControl({\n      provider: provider,\n      ...props,\n    });\n\n    map.addControl(searchControl);\n    return () => map.removeControl(searchControl);\n  }, [props]);\n\n  return null;\n};\nexport default SearchControl;\n",["65","66"],"/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/Routing.tsx",[],"/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/components/MapComponent.tsx",[],"/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/components/LocationMarker.tsx",["67","68"],"import L from \"leaflet\";\nimport { useEffect, useState } from \"react\";\nimport { Marker, useMapEvents } from \"react-leaflet\";\nimport { useIsMount } from \"../hooks/useIsMount\";\nimport icon from \"../img/marker.png\";\n\ninterface Props {\n  positions: any;\n  getLatLngOnDrag: Function;\n}\n\nconst LocationMarker = ({ positions, getLatLngOnDrag }: Props) => {\n  const markerIcon = new L.Icon({\n    iconUrl: icon,\n    iconSize: [40, 40],\n    iconAnchor: [17, 46],\n    popupAnchor: [0, -46],\n  });\n\n  const map = useMapEvents({\n    locationfound(e: any) {\n      map.flyTo(e.latlng, map.getZoom());\n    },\n    dragend: (e: any) => {\n      setPosition(e.target.getCenter());\n    },\n  });\n\n  const [position, setPosition] = useState(map.getCenter());\n  const isMount = useIsMount();\n\n  useEffect(() => {\n    if (!isMount) {\n      if (positions.isCurrentLocation) {\n        map.locate();\n      }\n    }\n  });\n\n  useEffect(() => {\n    if (!isMount) {\n      if (getLatLngOnDrag) {\n        getLatLngOnDrag(position);\n      }\n    }\n  }, [position]);\n\n  useEffect(()=>{\n    if(positions.isSearchPlace){\n      // @ts-ignore\n    map.flyTo({lat:positions.latitude,lng:positions.longitude},map.getZoom());\n    }\n    \n  },[positions.isSearchPlace,positions.latitude,positions.longitude])\n\n  return (\n    <Marker\n      icon={markerIcon}\n      position={[positions.latitude, positions.longitude]}\n    ></Marker>\n  );\n};\nexport default LocationMarker;\n","/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/hooks/useIsMount.ts",[],"/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/components/searchAutoComplete.tsx",["69","70","71"],"import React, { useState, useEffect, useRef } from 'react';\nimport { SearchInput } from 'evergreen-ui';\n\nlet autoComplete: any;\n\nconst loadScript = (url: string, callback: Function) => {\n  let script = document.createElement('script');\n  script.type = 'text/javascript';\n  //@ts-ignore\n  if (script.readyState) {\n    //@ts-ignore\n    script.onreadystatechange = function () {\n      //@ts-ignore\n      if (script.readyState === 'loaded' || script.readyState === 'complete') {\n        //@ts-ignore\n        script.onreadystatechange = null;\n        callback();\n      }\n    };\n  } else {\n    script.onload = () => callback();\n  }\n\n  script.src = url;\n\n  document.getElementsByTagName('head')[0].appendChild(script);\n};\n\nfunction handleScriptLoad(updateQuery: any, autoCompleteRef: any) {\n  // assign autoComplete with Google maps place one time\n  //@ts-ignore\n  autoComplete = new window.google.maps.places.Autocomplete(\n    autoCompleteRef.current,\n    { componentRestrictions: { country: 'ind' } }\n  );\n  autoComplete.setFields([\n    'address_components',\n    'formatted_address',\n    'geometry',\n  ]); // specify what properties we will get from API\n  // add a listener to handle when the place is selected\n  autoComplete.addListener('place_changed', () =>\n    handlePlaceSelect(updateQuery)\n  );\n}\n\nasync function handlePlaceSelect(updateQuery: any) {\n  const addressObject = autoComplete.getPlace(); // get place from google api\n\n  const query = addressObject.formatted_address;\n  updateQuery(query);\n}\ninterface Props {\n  gMapKey?: string;\n  getSearchPlaceLatLng?: Function;\n  currentLocationName?:string\n}\nconst SearchLocationInput = ({ gMapKey, getSearchPlaceLatLng,currentLocationName }: Props) => {\n  const [query, setQuery] = useState('');\n  const autoCompleteRef = useRef(null);\n  let selectPlace: any;\n  const [latLng, setLatLng] = useState({\n    lat: 0,\n    lng: 0,\n    place:''\n  });\n\n  if (autoComplete) {\n    selectPlace = autoComplete.getPlace();    \n  }\n\n  useEffect(() => {\n    if (selectPlace) {\n      const latitude = selectPlace.geometry.location.lat();\n      const longitude = selectPlace.geometry.location.lng();\n      setLatLng({\n        lat: latitude,\n        lng: longitude,\n        place:query\n      });\n    }\n  }, [selectPlace]);\n\n  useEffect(() => {\n    loadScript(\n      `https://maps.googleapis.com/maps/api/js?key=${gMapKey}&libraries=places`,\n      () => handleScriptLoad(setQuery, autoCompleteRef)\n    );\n  }, [autoCompleteRef]);\n\n  useEffect(() => {\n    if (latLng.lat > 0) {\n      if(getSearchPlaceLatLng){\n        getSearchPlaceLatLng({ latitude: latLng.lat, longitude: latLng.lng,place:latLng.place })\n      }\n    }\n  }, [latLng]);\n\n  useEffect(()=>{\n    if(currentLocationName){\n      setQuery(currentLocationName)\n    }\n  },[currentLocationName])\n\n  return (\n    <div>\n      <SearchInput\n        ref={autoCompleteRef}\n        onChange={(event: any) => setQuery(event.target.value)}\n        position=\"absolute\" \n        top={20} \n        left=\"40%\"\n        height={40}  \n        zIndex={999} \n        placeholder=\"Search your place...\"\n        value={query}\n      />\n    </div>\n  );\n};\nexport default SearchLocationInput;\n","/Users/goutamsamal/Documents/demo-projects/strava-react-leaflet-map/src/EndPoint/index.ts",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":1,"column":40,"nodeType":"78","messageId":"79","endLine":1,"endColumn":51},{"ruleId":"80","severity":1,"message":"81","line":34,"column":6,"nodeType":"82","endLine":34,"endColumn":13,"suggestions":"83"},{"ruleId":"72","replacedBy":"84"},{"ruleId":"74","replacedBy":"85"},{"ruleId":"80","severity":1,"message":"86","line":46,"column":6,"nodeType":"82","endLine":46,"endColumn":16,"suggestions":"87"},{"ruleId":"80","severity":1,"message":"88","line":54,"column":5,"nodeType":"82","endLine":54,"endColumn":69,"suggestions":"89"},{"ruleId":"80","severity":1,"message":"90","line":82,"column":6,"nodeType":"82","endLine":82,"endColumn":19,"suggestions":"91"},{"ruleId":"80","severity":1,"message":"92","line":89,"column":6,"nodeType":"82","endLine":89,"endColumn":23,"suggestions":"93"},{"ruleId":"80","severity":1,"message":"94","line":97,"column":6,"nodeType":"82","endLine":97,"endColumn":14,"suggestions":"95"},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"@typescript-eslint/no-unused-vars","'SearchInput' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'map' and 'provider'. Either include them or remove the dependency array.","ArrayExpression",["98"],["96"],["97"],"React Hook useEffect has missing dependencies: 'getLatLngOnDrag' and 'isMount'. Either include them or remove the dependency array. If 'getLatLngOnDrag' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["99"],"React Hook useEffect has a missing dependency: 'map'. Either include it or remove the dependency array.",["100"],"React Hook useEffect has a missing dependency: 'query'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setLatLng' needs the current value of 'query'.",["101"],"React Hook useEffect has a missing dependency: 'gMapKey'. Either include it or remove the dependency array.",["102"],"React Hook useEffect has a missing dependency: 'getSearchPlaceLatLng'. Either include it or remove the dependency array. If 'getSearchPlaceLatLng' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["103"],"no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},"Update the dependencies array to be: [map, props, provider]",{"range":"116","text":"117"},"Update the dependencies array to be: [getLatLngOnDrag, isMount, position]",{"range":"118","text":"119"},"Update the dependencies array to be: [map, positions.isSearchPlace, positions.latitude, positions.longitude]",{"range":"120","text":"121"},"Update the dependencies array to be: [query, selectPlace]",{"range":"122","text":"123"},"Update the dependencies array to be: [autoCompleteRef, gMapKey]",{"range":"124","text":"125"},"Update the dependencies array to be: [getSearchPlaceLatLng, latLng]",{"range":"126","text":"127"},[755,762],"[map, props, provider]",[1015,1025],"[getLatLngOnDrag, isMount, position]",[1194,1258],"[map, positions.isSearchPlace, positions.latitude, positions.longitude]",[2240,2253],"[query, selectPlace]",[2442,2459],"[autoCompleteRef, gMapKey]",[2657,2665],"[getSearchPlaceLatLng, latLng]"]